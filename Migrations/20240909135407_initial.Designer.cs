// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RatingManagementSystem.Data;

#nullable disable

namespace RatingManagementSystem.Migrations
{
    [DbContext(typeof(RatingSystemDbContext))]
    [Migration("20240909135407_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "022a4aaa-75f8-4882-863b-b4cd2cc12b0c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ae28ba6f-3c7a-46ee-aefd-ecae37ffb573",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "e1690e5b-b6d0-496d-84d3-daabbd0cf541",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RatingManagementSystem.Data.Models.ApplicationData", b =>
                {
                    b.Property<int>("ApplicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationID"));

                    b.Property<string>("Accepted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BacCertificateFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CVFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConferenceParticipationFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DefenseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefenseLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefenseUniversity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorsDecision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrInFds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrMajor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinalResultNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FolderPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MasterCertificateFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MasterThesisFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhDCertificateFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhDEquivalencyFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhDThesisFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicationsFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RapportdeSoutenanceFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThesisRateType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThesisTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YourFaculty")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationID");

                    b.HasIndex("Id");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("RatingManagementSystem.Data.Models.CommitteeMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Joined")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CommitteeMembers");
                });

            modelBuilder.Entity("RatingManagementSystem.Data.Models.FinalResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Desicion_Authentic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desicion_ParticipationInConference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desicion_Patented")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desicion_PresentedInInternationalConference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desicion_PublishedInInternationalMagazine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Desicion_ThesisOriginal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TID")
                        .IsUnique()
                        .HasFilter("[TID] IS NOT NULL");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("RatingManagementSystem.Data.Models.Thesis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationID")
                        .HasColumnType("int");

                    b.Property<string>("Authors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DecideIf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FromPage")
                        .HasColumnType("int");

                    b.Property<string>("Journal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JournalNumber")
                        .HasColumnType("int");

                    b.Property<DateOnly>("JournalYear")
                        .HasColumnType("date");

                    b.Property<string>("MembersContributionTResearch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RID")
                        .HasColumnType("int");

                    b.Property<string>("ResearchTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToPage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationID");

                    b.ToTable("AppThesis");
                });

            modelBuilder.Entity("RatingManagementSystem.Data.Models.UserData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CommitteeID")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorMajor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("isInCommittee")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommitteeID")
                        .IsUnique()
                        .HasFilter("[CommitteeID] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RatingManagementSystem.Data.Models.UserData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RatingManagementSystem.Data.Models.UserData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RatingManagementSystem.Data.Models.UserData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RatingManagementSystem.Data.Models.UserData", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RatingManagementSystem.Data.Models.ApplicationData", b =>
                {
                    b.HasOne("RatingManagementSystem.Data.Models.UserData", "UserData")
                        .WithMany("Application")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserData");
                });

            modelBuilder.Entity("RatingManagementSystem.Data.Models.FinalResult", b =>
                {
                    b.HasOne("RatingManagementSystem.Data.Models.Thesis", "Thesis")
                        .WithOne("Results")
                        .HasForeignKey("RatingManagementSystem.Data.Models.FinalResult", "TID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Thesis");
                });

            modelBuilder.Entity("RatingManagementSystem.Data.Models.Thesis", b =>
                {
                    b.HasOne("RatingManagementSystem.Data.Models.ApplicationData", "ApplicationData")
                        .WithMany("ThesisDetails")
                        .HasForeignKey("ApplicationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationData");
                });

            modelBuilder.Entity("RatingManagementSystem.Data.Models.UserData", b =>
                {
                    b.HasOne("RatingManagementSystem.Data.Models.CommitteeMember", "CommitteeMember")
                        .WithOne("Members")
                        .HasForeignKey("RatingManagementSystem.Data.Models.UserData", "CommitteeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CommitteeMember");
                });

            modelBuilder.Entity("RatingManagementSystem.Data.Models.ApplicationData", b =>
                {
                    b.Navigation("ThesisDetails");
                });

            modelBuilder.Entity("RatingManagementSystem.Data.Models.CommitteeMember", b =>
                {
                    b.Navigation("Members")
                        .IsRequired();
                });

            modelBuilder.Entity("RatingManagementSystem.Data.Models.Thesis", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("RatingManagementSystem.Data.Models.UserData", b =>
                {
                    b.Navigation("Application");
                });
#pragma warning restore 612, 618
        }
    }
}
